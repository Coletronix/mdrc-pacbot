var searchIndex = JSON.parse('{\
"mdrc_pacbot_util":{"doc":"Utilities for writing blazingly fast Pacbot code","t":"AAAAADENRRGENNNNNDLLLLLLLLLLLLLLLLLNLLLLLLLLLMLLLLLLLLLMLLLLNLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLMNLLNLMLMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMFLLLLLLMLMDDLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLMMMMMFFMMLLLLALLLLLLLLLLDLLLLLLLLLLLLLLLLLLLLLMMMMLLLLLLLDDDDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLMLLLLLLLLLLMLLLLLLLLLLLLLLLMLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMLMMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMRRDLLLLMLMMLLLLLLLLLLMLMLLLLLMMMLLMMMMMMMLLLLLLLLLNRRRRNNNELLLLLLLLLLLLLLLLLLLLLLLLLLLLLL","n":["grid","gui","robot","simulation","standard_grids","ComputedGrid","Direction","Down","GRID_HEIGHT","GRID_WIDTH","Grid","GridValue","I","Left","O","Right","Up","Wall","as_any","as_any","as_any","as_any","as_any_mut","as_any_mut","as_any_mut","as_any_mut","at","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","c","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","coords_to_node","coords_to_node","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","dist","distance_matrix","drop","drop","drop","drop","e","eq","eq","eq","eq","equivalent","equivalent","fmt","fmt","fmt","fmt","from","from","from","from","from_subset","from_subset","from_subset","from_subset","grid","grid","init","init","init","init","into","into","into","into","into_any","into_any","into_any","into_any","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","is_in_subset","is_in_subset","is_in_subset","is_in_subset","left_bottom","n","neighbors","next","o","pellet_count","pellet_count","power_pellets","power_pellets","right_top","to_owned","to_owned","to_owned","to_owned","to_subset","to_subset","to_subset","to_subset","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from_primitive","try_from_primitive","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","valid_actions","valid_actions","validate_grid","vzip","vzip","vzip","vzip","walkable","walkable_nodes","walkable_nodes","walls","walls","App","PhysicsRenderInfo","add_grid_variants","as_any","as_any","as_any_mut","as_any_mut","borrow","borrow","borrow_mut","borrow_mut","default","default","deref","deref","deref_mut","deref_mut","draw_game","draw_physics","drop","drop","from","from","from_subset","from_subset","grid","init","init","into","into","into_any","into_any","into_any_arc","into_any_arc","into_any_rc","into_any_rc","is_in_subset","is_in_subset","null_value","null_value","pacbot_pos","phys_render","pointer_pos","primary_robot_rays","robot","run_gui","run_physics","selected_grid","target_velocity","to_subset","to_subset","to_subset_unchecked","to_subset_unchecked","transforms","try_from","try_from","try_into","try_into","type_id","type_id","update","update_target_velocity","vzip","vzip","Transform","as_any","as_any_mut","borrow","borrow_mut","deref","deref_mut","drop","from","from_subset","init","into","into_any","into_any_arc","into_any_rc","inverse","is_in_subset","map_dist","map_point","map_wall","new_horizontal_padded","new_letterboxed","offset_x","offset_y","scale_x","scale_y","to_subset","to_subset_unchecked","transpose","try_from","try_into","type_id","vzip","DistanceSensor","IMU","Motor","OmniWheel","Robot","as_any","as_any","as_any","as_any","as_any","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","collider_radius","default","density","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","distance_sensors","drop","drop","drop","drop","drop","eq","eq","eq","eq","eq","fmt","fmt","fmt","fmt","fmt","forward_direction","from","from","from","from","from","from_subset","from_subset","from_subset","from_subset","from_subset","imu","init","init","init","init","init","into","into","into","into","into","into_any","into_any","into_any","into_any","into_any","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","max_range","motors","noise_std","noise_std","null_value","radius","relative_direction","relative_position","relative_position","to_owned","to_owned","to_owned","to_owned","to_owned","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","vzip","wheel","GROUP_ROBOT","GROUP_WALL","PacbotSimulation","as_any","as_any_mut","borrow","borrow_mut","broad_phase","cast_ray","ccd_solver","collider_set","default","deref","deref_mut","drop","from","from_subset","get_collider_position","get_primary_robot_collider","get_primary_robot_position","get_primary_robot_rays","impulse_joint_set","init","integration_parameters","into","into_any","into_any_arc","into_any_rc","is_in_subset","island_manager","multibody_joint_set","narrow_phase","new","null_value","physics_pipeline","primary_robot","query_pipeline","query_pipeline_updated","rigid_body_set","robot_specifications","robot_target_velocity","set_target_robot_velocity","step","step_target_velocity","to_subset","to_subset_unchecked","try_from","try_into","type_id","vzip","Blank","GRID_BLANK","GRID_OUTER","GRID_PACMAN","GRID_PLAYGROUND","Outer","Pacman","Playground","StandardGrid","as_any","as_any_mut","borrow","borrow_mut","clone","clone_into","deref","deref_mut","drop","eq","equivalent","fmt","from","from_subset","get_all","get_grid","hash","init","into","into_any","into_any_arc","into_any_rc","is_in_subset","to_owned","to_subset","to_subset_unchecked","try_from","try_into","type_id","vzip"],"q":[[0,"mdrc_pacbot_util"],[5,"mdrc_pacbot_util::grid"],[156,"mdrc_pacbot_util::gui"],[220,"mdrc_pacbot_util::gui::transforms"],[253,"mdrc_pacbot_util::robot"],[404,"mdrc_pacbot_util::simulation"],[454,"mdrc_pacbot_util::standard_grids"]],"d":["Logical grid structs and utilities.","Top-level GUI elements and functionality.","Describes the physical features of a Robot","Handles all physics related operations","A set of pre-made general purpose grids","A <code>Grid</code> with precomputed data for faster pathfinding.","Enum for direction values.","Down, or -y","Height of a <code>Grid</code>.","Width of a <code>Grid</code>.","A 2D grid of <code>GridValue</code>s.","Enum for <code>Grid</code> cell values.","Wall","Left, or -x","Power pellet","Right, or +x","Up, or +y","A rectangle representing a wall.","","","","","","","","","Returns the <code>GridValue</code> at the given position, or <code>None</code> if …","","","","","","","","","Cherry position","","","","","","","","","Returns the index of the given position in the …","","","","","","","","","","Returns the distance between two points, or <code>None</code> if the …","note that all walkable nodes might not be reachable from …","","","","","Empty space","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","Returns the underlying <code>Grid</code>.","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","The bottom left corner of the <code>Wall</code>.","Ghost chambers","Returns all the walkable neighbors of the given position.","Returns the <code>Point2</code> in the given direction from the given …","Normal pellet","Returns the number of pellets in the grid.","","Returns the positions of all power pellets in the grid.","","The top right corner of the <code>Wall</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the valid actions for the given position.","walkable, right, left, up, down","Validates a <code>Grid</code>.","","","","","Returns whether this <code>GridValue</code> is walkable.","Returns the positions of all walkable nodes in the grid.","","Returns the <code>Wall</code>s in the grid.","walls represent rectangles with top left corner at the …","","Stores state needed to render physics information.","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","The current position of the robot.","A read-only reference to info needed to render physics.","","An array of start and end points.","","Launches the GUI application. Blocks until the application …","Thread where physics gets run.","","","","","","","Transforms between coordinate systems (such as …","","","","","","","","","","","A 2D transform consisting of per-axis scale and …","","","","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","","","Returns the inverse <code>Transform</code>. Panics if the …","","Applies a scalar transformation","Applies the transformation to a point.","Returns the coordinates of the top left and bottom right …","Creates a new <code>Transform</code> that maps the rect <code>(src_p1, src_p2)</code>…","Creates a new <code>Transform</code> that maps the rect <code>(src_p1, src_p2)</code>…","","","","","","","Swaps the X and Y components of this <code>Transform</code>.","","","","","Represents a Distance Sensor on a <code>Robot</code>","Represents an Inertial Measurement Unit, usually an …","Represents a Motor on a <code>Robot</code>","Represents a single OmniWheel on a <code>Motor</code>","Represents the physical features of a Robot","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The physical radius of the robot that should collide with …","","The average density of the robot","","","","","","","","","","","All distance sensors on the robot","","","","","","","","","","","","","","","","The forward direction of the motor relative to the <code>Robot</code>","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","The IMU present on the robot","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","When the object is farther than this, the ray will be …","All motors attached to the robot","Standard deviation of the noise this sensor is expected to …","Standard deviation of the noise this sensor is expected to …","","Radius of the wheel","The (angle) direction of the sensor relative to the <code>Robot</code>","The position of the motor relative to the <code>Robot</code>","The position of the sensor relative to the <code>Robot</code>","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The <code>OmniWheel</code> attached to this <code>Motor</code>","Rapier interaction group representing all robots","Rapier interaction group representing all walls","Handles all physics related operations","","","","","","Cast a ray in the simulation","","","Creates a simulation with GRID_PACMAN, the default Robot, …","","","","Returns the argument unchanged.","","Get the <code>Isometry</code> for a given <code>ColliderHandle</code>","Get the collider for the primary robot","Get the current position of the primary robot","Get the rays coming out of the primary robot, representing …","","","","Calls <code>U::from(self)</code>.","","","","","","","","Create a new simulation on a ComputedGrid with a starting …","","","","","","","","","Set the target velocity (translational and rotational) for …","Update the physics simulation","Apply an impulse to the primary robot based on …","","","","","","","A (mostly) blank <code>Grid</code> - (1, 1) is walkable","A (mostly) blank <code>Grid</code> - (1, 1) is walkable","A <code>Grid</code> where the outermost path is empty","The official Pacbot <code>Grid</code>","A <code>Grid</code> with many smaller paths to practice maneuvering","A <code>Grid</code> where the outermost path is empty","The official Pacbot <code>Grid</code>","A <code>Grid</code> with many smaller paths to practice maneuvering","An enum to support egui grid selection","","","","","","","","","","","","","Returns the argument unchanged.","","Get a list of all available grids","Get the <code>Grid</code> associated with this enum","","","Calls <code>U::from(self)</code>.","","","","","","","","","","",""],"i":[0,0,0,0,0,0,0,7,0,0,0,0,5,7,5,7,7,0,7,5,8,2,7,5,8,2,2,7,5,8,2,7,5,8,2,5,7,5,8,2,7,5,8,2,2,2,7,5,8,2,7,5,8,2,2,2,7,5,8,2,5,7,5,8,2,7,5,7,5,8,2,7,5,8,2,7,5,8,2,2,2,7,5,8,2,7,5,8,2,7,5,8,2,7,5,8,2,7,5,8,2,7,5,8,2,8,5,2,2,5,2,2,2,2,8,7,5,8,2,7,5,8,2,7,5,8,2,7,7,5,5,8,2,2,7,5,7,5,8,2,7,5,8,2,2,2,0,7,5,8,2,5,2,2,2,2,0,0,25,25,27,25,27,25,27,25,27,25,27,25,27,25,27,25,25,25,27,25,27,25,27,25,25,27,25,27,25,27,25,27,25,27,25,27,25,27,27,25,25,27,25,0,0,25,25,25,27,25,27,0,25,27,25,27,25,27,25,25,25,27,0,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,0,0,0,0,0,35,36,37,38,39,35,36,37,38,39,35,36,37,38,39,35,36,37,38,39,35,36,37,38,39,35,36,37,38,39,39,39,39,35,36,37,38,39,35,36,37,38,39,39,35,36,37,38,39,35,36,37,38,39,35,36,37,38,39,37,35,36,37,38,39,35,36,37,38,39,39,35,36,37,38,39,35,36,37,38,39,35,36,37,38,39,35,36,37,38,39,35,36,37,38,39,35,36,37,38,39,38,39,35,38,39,36,38,37,38,35,36,37,38,39,35,36,37,38,39,35,36,37,38,39,35,36,37,38,39,35,36,37,38,39,35,36,37,38,39,35,36,37,38,39,37,0,0,0,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,46,0,0,0,0,46,46,46,0,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[2,[4,[3]]],[[6,[5]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,[7,7],[5,5],[8,8],[2,2],[[]],[[]],[[]],[[]],[[2,[4,[3]]],[[6,[9]]]],0,[9],[9],[9],[9],[9],[9],[9],[9],[[2,[4,[3]],[4,[3]]],[[6,[3]]]],0,[9],[9],[9],[9],0,[[7,7],10],[[5,5],10],[[8,8],10],[[2,2],10],[[],10],[[],10],[[7,11],12],[[5,11],12],[[8,11],12],[[2,11],12],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[2,13],0,[[],9],[[],9],[[],9],[[],9],[[]],[[]],[[]],[[]],[[[15,[14]]],[[15,[1,14]]]],[[[15,[14]]],[[15,[1,14]]]],[[[15,[14]]],[[15,[1,14]]]],[[[15,[14]]],[[15,[1,14]]]],[16,[[16,[1]]]],[16,[[16,[1]]]],[16,[[16,[1]]]],[16,[[16,[1]]]],[17,[[17,[1]]]],[17,[[17,[1]]]],[17,[[17,[1]]]],[17,[[17,[1]]]],[[],10],[[],10],[[],10],[[],10],0,0,[[2,[4,[3]]],[[18,[[4,[3]]]]]],[[2,[4,[3]],7],[[6,[[4,[3]]]]]],0,[2,19],0,[2,[[18,[[4,[3]]]]]],0,0,[[]],[[]],[[]],[[]],[[],6],[[],6],[[],6],[[],6],[[]],[[]],[[]],[[]],[3,[[21,[7,[20,[7]]]]]],[[],21],[[],21],[3,[[21,[5,[20,[5]]]]]],[[],21],[[],21],[13,[[21,[2]]]],[[],[[21,[7,[20,[7]]]]]],[[],[[21,[5,[20,[5]]]]]],[[],21],[[],21],[[],21],[[],21],[[],22],[[],22],[[],22],[[],22],[[2,[4,[3]]],[[6,[[23,[10]]]]]],0,[13,[[21,[24]]]],[[]],[[]],[[]],[[]],[5,10],[2,[[18,[[4,[3]]]]]],0,[2,[[18,[8]]]],0,0,0,[[25,26]],[[],1],[[],1],[[],1],[[],1],[[]],[[]],[[]],[[]],[[],25],[[],27],[9],[9],[9],[9],[[25,28,26]],[[25,29,30]],[9],[9],[[]],[[]],[[]],[[]],0,[[],9],[[],9],[[]],[[]],[[[15,[14]]],[[15,[1,14]]]],[[[15,[14]]],[[15,[1,14]]]],[16,[[16,[1]]]],[16,[[16,[1]]]],[17,[[17,[1]]]],[17,[[17,[1]]]],[[],10],[[],10],[[]],[[]],0,0,0,0,0,[[]],[[[16,[[31,[27]]]],[16,[31]]]],0,0,[[],6],[[],6],[[]],[[]],0,[[],21],[[],21],[[],21],[[],21],[[],22],[[],22],[[25,28,32]],[[25,28]],[[]],[[]],0,[[],1],[[],1],[[]],[[]],[9],[9],[9],[[]],[[]],[[],9],[[]],[[[15,[14]]],[[15,[1,14]]]],[16,[[16,[1]]]],[17,[[17,[1]]]],[29,29],[[],10],[[29,33],33],[[29,34],34],[[29,8]],[[34,34,34,34],29],[[34,34,34,34],29],0,0,0,0,[[],6],[[]],[29,29],[[],21],[[],21],[[],22],[[]],0,0,0,0,0,[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[35,35],[36,36],[37,37],[38,38],[39,39],[[]],[[]],[[]],[[]],[[]],0,[[],39],0,[9],[9],[9],[9],[9],[9],[9],[9],[9],[9],0,[9],[9],[9],[9],[9],[[35,35],10],[[36,36],10],[[37,37],10],[[38,38],10],[[39,39],10],[[35,11],12],[[36,11],12],[[37,11],12],[[38,11],12],[[39,11],12],0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,[[],9],[[],9],[[],9],[[],9],[[],9],[[]],[[]],[[]],[[]],[[]],[[[15,[14]]],[[15,[1,14]]]],[[[15,[14]]],[[15,[1,14]]]],[[[15,[14]]],[[15,[1,14]]]],[[[15,[14]]],[[15,[1,14]]]],[[[15,[14]]],[[15,[1,14]]]],[16,[[16,[1]]]],[16,[[16,[1]]]],[16,[[16,[1]]]],[16,[[16,[1]]]],[16,[[16,[1]]]],[17,[[17,[1]]]],[17,[[17,[1]]]],[17,[[17,[1]]]],[17,[[17,[1]]]],[17,[[17,[1]]]],[[],10],[[],10],[[],10],[[],10],[[],10],0,0,0,0,[[]],0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[],6],[[],6],[[],6],[[],6],[[],6],[[]],[[]],[[]],[[]],[[]],[[],21],[[],21],[[],21],[[],21],[[],21],[[],21],[[],21],[[],21],[[],21],[[],21],[[],22],[[],22],[[],22],[[],22],[[],22],[[]],[[]],[[]],[[]],[[]],0,0,0,0,[[],1],[[],1],[[]],[[]],0,[[40,41,42],[[43,[42]]]],0,0,[[],40],[9],[9],[9],[[]],[[]],[[40,44],[[6,[[45,[33]]]]]],[40,44],[40,[[45,[33]]]],[40,18],0,[[],9],0,[[]],[[[15,[14]]],[[15,[1,14]]]],[16,[[16,[1]]]],[17,[[17,[1]]]],[[],10],0,0,0,[[2,39,[45,[33]]],40],[[]],0,0,0,0,0,0,0,[40],[40],[40],[[],6],[[]],[[],21],[[],21],[[],22],[[]],0,0,0,0,0,0,0,0,0,[[],1],[[],1],[[]],[[]],[46,46],[[]],[9],[9],[9],[[46,46],10],[[],10],[[46,11],12],[[]],[[]],[[],[[18,[46]]]],[46,13],[[46,47]],[[],9],[[]],[[[15,[14]]],[[15,[1,14]]]],[16,[[16,[1]]]],[17,[[17,[1]]]],[[],10],[[]],[[],6],[[]],[[],21],[[],21],[[],22],[[]]],"c":[],"p":[[8,"Any"],[3,"ComputedGrid"],[15,"u8"],[6,"Point2"],[4,"GridValue"],[4,"Option"],[4,"Direction"],[3,"Wall"],[15,"usize"],[15,"bool"],[3,"Formatter"],[6,"Result"],[6,"Grid"],[3,"Global"],[3,"Box"],[3,"Arc"],[3,"Rc"],[3,"Vec"],[15,"u32"],[3,"TryFromPrimitiveError"],[4,"Result"],[3,"TypeId"],[15,"array"],[3,"Error"],[3,"App"],[3,"Ui"],[3,"PhysicsRenderInfo"],[3,"Context"],[3,"Transform"],[3,"Painter"],[3,"RwLock"],[3,"Frame"],[15,"f32"],[3,"Pos2"],[3,"IMU"],[3,"OmniWheel"],[3,"Motor"],[3,"DistanceSensor"],[3,"Robot"],[3,"PacbotSimulation"],[6,"Ray"],[6,"Real"],[6,"Point"],[3,"ColliderHandle"],[6,"Isometry2"],[4,"StandardGrid"],[8,"Hasher"]]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
