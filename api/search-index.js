var searchIndex = JSON.parse('{\
"mdrc_pacbot_util":{"doc":"Utilities for writing blazingly fast Pacbot code","t":"AAADENRRGENNNNNDLLLLLLLLLLLLLLLLLNLLLLLLLLLMLLLLLLLLLMLLLLNLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLMNLLNLMLMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMFLLLLLLMLMDLLLLLLLLLLLLMLLLLLLLMFMLLALLLLLDLLLLLLLLLLLLLLLLLLLLMMMMLLLLLLLNRRRRNNNELLLLLLLLLLLLLLLLLLLLLLLLLLLLLL","n":["grid","gui","standard_grids","ComputedGrid","Direction","Down","GRID_HEIGHT","GRID_WIDTH","Grid","GridValue","I","Left","O","Right","Up","Wall","as_any","as_any","as_any","as_any","as_any_mut","as_any_mut","as_any_mut","as_any_mut","at","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","c","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","coords_to_node","coords_to_node","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","dist","distance_matrix","drop","drop","drop","drop","e","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","fmt","fmt","fmt","fmt","from","from","from","from","from_subset","from_subset","from_subset","from_subset","grid","grid","init","init","init","init","into","into","into","into","into_any","into_any","into_any","into_any","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","is_in_subset","is_in_subset","is_in_subset","is_in_subset","left_bottom","n","neighbors","next","o","pellet_count","pellet_count","power_pellets","power_pellets","right_top","to_owned","to_owned","to_owned","to_owned","to_subset","to_subset","to_subset","to_subset","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from_primitive","try_from_primitive","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","valid_actions","valid_actions","validate_grid","vzip","vzip","vzip","vzip","walkable","walkable_nodes","walkable_nodes","walls","walls","App","add_grid_variants","as_any","as_any_mut","borrow","borrow_mut","default","deref","deref_mut","draw_game","drop","from","from_subset","grid","init","into","into_any","into_any_arc","into_any_rc","is_in_subset","null_value","pointer_pos","run_gui","selected_grid","to_subset","to_subset_unchecked","transforms","try_from","try_into","type_id","update","vzip","Transform","as_any","as_any_mut","borrow","borrow_mut","deref","deref_mut","drop","from","from_subset","init","into","into_any","into_any_arc","into_any_rc","inverse","is_in_subset","map_point","map_wall","new_horizontal_padded","new_letterboxed","offset_x","offset_y","scale_x","scale_y","to_subset","to_subset_unchecked","transpose","try_from","try_into","type_id","vzip","Blank","GRID_BLANK","GRID_OUTER","GRID_PACMAN","GRID_PLAYGROUND","Outer","Pacman","Playground","StandardGrid","as_any","as_any_mut","borrow","borrow_mut","clone","clone_into","deref","deref_mut","drop","eq","equivalent","fmt","from","from_subset","get_all","get_grid","hash","init","into","into_any","into_any_arc","into_any_rc","is_in_subset","to_owned","to_subset","to_subset_unchecked","try_from","try_into","type_id","vzip"],"q":[[0,"mdrc_pacbot_util"],[3,"mdrc_pacbot_util::grid"],[156,"mdrc_pacbot_util::gui"],[188,"mdrc_pacbot_util::gui::transforms"],[220,"mdrc_pacbot_util::standard_grids"]],"d":["Logical grid structs and utilities.","Top-level GUI elements and functionality.","A set of pre-made general purpose grids","A <code>Grid</code> with precomputed data for faster pathfinding.","Enum for direction values.","Down, or -y","Height of a <code>Grid</code>.","Width of a <code>Grid</code>.","A 2D grid of <code>GridValue</code>s.","Enum for <code>Grid</code> cell values.","Wall","Left, or -x","Power pellet","Right, or +x","Up, or +y","A rectangle representing a wall.","","","","","","","","","Returns the <code>GridValue</code> at the given position, or <code>None</code> if …","","","","","","","","","Cherry position","","","","","","","","","Returns the index of the given position in the …","","","","","","","","","","Returns the distance between two points, or <code>None</code> if the …","note that all walkable nodes might not be reachable from …","","","","","Empty space","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","Returns the underlying <code>Grid</code>.","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","The bottom left corner of the <code>Wall</code>.","Ghost chambers","Returns all the walkable neighbors of the given position.","Returns the <code>Point2</code> in the given direction from the given …","Normal pellet","Returns the number of pellets in the grid.","","Returns the positions of all power pellets in the grid.","","The top right corner of the <code>Wall</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the valid actions for the given position.","walkable, right, left, up, down","Validates a <code>Grid</code>.","","","","","Returns whether this <code>GridValue</code> is walkable.","Returns the positions of all walkable nodes in the grid.","","Returns the <code>Wall</code>s in the grid.","walls represent rectangles with top left corner at the …","","","","","","","","","","","","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","","","","","","","Launches the GUI application. Blocks until the application …","","","","Transforms between coordinate systems (such as …","","","","","","A 2D transform consisting of per-axis scale and …","","","","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","","","Returns the inverse <code>Transform</code>. Panics if the …","","Applies the transformation to a point.","Returns the coordinates of the top left and bottom right …","Creates a new <code>Transform</code> that maps the rect <code>(src_p1, src_p2)</code>…","Creates a new <code>Transform</code> that maps the rect <code>(src_p1, src_p2)</code>…","","","","","","","Swaps the X and Y components of this <code>Transform</code>.","","","","","A (mostly) blank <code>Grid</code> - (1, 1) is walkable","A (mostly) blank <code>Grid</code> - (1, 1) is walkable","A <code>Grid</code> where the outermost path is empty","The official Pacbot <code>Grid</code>","A <code>Grid</code> with many smaller paths to practice maneuvering","A <code>Grid</code> where the outermost path is empty","The official Pacbot <code>Grid</code>","A <code>Grid</code> with many smaller paths to practice maneuvering","An enum to support egui grid selection","","","","","","","","","","","","","Returns the argument unchanged.","","Get a list of all available grids","Get the <code>Grid</code> associated with this enum","","","Calls <code>U::from(self)</code>.","","","","","","","","","","",""],"i":[0,0,0,0,0,7,0,0,0,0,5,7,5,7,7,0,7,5,8,2,7,5,8,2,2,7,5,8,2,7,5,8,2,5,7,5,8,2,7,5,8,2,2,2,7,5,8,2,7,5,8,2,2,2,7,5,8,2,5,7,5,8,2,7,5,8,2,7,5,8,2,7,5,8,2,7,5,8,2,2,2,7,5,8,2,7,5,8,2,7,5,8,2,7,5,8,2,7,5,8,2,7,5,8,2,8,5,2,2,5,2,2,2,2,8,7,5,8,2,7,5,8,2,7,5,8,2,7,7,5,5,8,2,2,7,5,7,5,8,2,7,5,8,2,2,2,0,7,5,8,2,5,2,2,2,2,0,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,0,25,25,25,0,25,25,25,25,25,0,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,31,0,0,0,0,31,31,31,0,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[2,[4,[3]]],[[6,[5]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,[7,7],[5,5],[8,8],[2,2],[[]],[[]],[[]],[[]],[[2,[4,[3]]],[[6,[9]]]],0,[9],[9],[9],[9],[9],[9],[9],[9],[[2,[4,[3]],[4,[3]]],[[6,[3]]]],0,[9],[9],[9],[9],0,[[7,7],10],[[5,5],10],[[8,8],10],[[2,2],10],[[],10],[[],10],[[],10],[[],10],[[7,11],12],[[5,11],12],[[8,11],12],[[2,11],12],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[2,13],0,[[],9],[[],9],[[],9],[[],9],[[]],[[]],[[]],[[]],[[[15,[14]]],[[15,[1,14]]]],[[[15,[14]]],[[15,[1,14]]]],[[[15,[14]]],[[15,[1,14]]]],[[[15,[14]]],[[15,[1,14]]]],[16,[[16,[1]]]],[16,[[16,[1]]]],[16,[[16,[1]]]],[16,[[16,[1]]]],[17,[[17,[1]]]],[17,[[17,[1]]]],[17,[[17,[1]]]],[17,[[17,[1]]]],[[],10],[[],10],[[],10],[[],10],0,0,[[2,[4,[3]]],[[18,[[4,[3]]]]]],[[2,[4,[3]],7],[[6,[[4,[3]]]]]],0,[2,19],0,[2,[[18,[[4,[3]]]]]],0,0,[[]],[[]],[[]],[[]],[[],6],[[],6],[[],6],[[],6],[[]],[[]],[[]],[[]],[[],20],[3,[[20,[7,[21,[7]]]]]],[[],20],[3,[[20,[5,[21,[5]]]]]],[[],20],[13,[[20,[2]]]],[[],20],[[],[[20,[7,[21,[7]]]]]],[[],[[20,[5,[21,[5]]]]]],[[],20],[[],20],[[],20],[[],20],[[],22],[[],22],[[],22],[[],22],[[2,[4,[3]]],[[6,[[23,[10]]]]]],0,[13,[[20,[24]]]],[[]],[[]],[[]],[[]],[5,10],[2,[[18,[[4,[3]]]]]],0,[2,[[18,[8]]]],0,0,[[25,26]],[[],1],[[],1],[[]],[[]],[[],25],[9],[9],[[25,27,26]],[9],[[]],[[]],0,[[],9],[[]],[[[15,[14]]],[[15,[1,14]]]],[16,[[16,[1]]]],[17,[[17,[1]]]],[[],10],[[]],0,[[]],0,[[],6],[[]],0,[[],20],[[],20],[[],22],[[25,27,28]],[[]],0,[[],1],[[],1],[[]],[[]],[9],[9],[9],[[]],[[]],[[],9],[[]],[[[15,[14]]],[[15,[1,14]]]],[16,[[16,[1]]]],[17,[[17,[1]]]],[29,29],[[],10],[[29,30],30],[[29,8]],[[30,30,30,30],29],[[30,30,30,30],29],0,0,0,0,[[],6],[[]],[29,29],[[],20],[[],20],[[],22],[[]],0,0,0,0,0,0,0,0,0,[[],1],[[],1],[[]],[[]],[31,31],[[]],[9],[9],[9],[[31,31],10],[[],10],[[31,11],12],[[]],[[]],[[],[[18,[31]]]],[31,13],[[31,32]],[[],9],[[]],[[[15,[14]]],[[15,[1,14]]]],[16,[[16,[1]]]],[17,[[17,[1]]]],[[],10],[[]],[[],6],[[]],[[],20],[[],20],[[],22],[[]]],"c":[],"p":[[8,"Any"],[3,"ComputedGrid"],[15,"u8"],[6,"Point2"],[4,"GridValue"],[4,"Option"],[4,"Direction"],[3,"Wall"],[15,"usize"],[15,"bool"],[3,"Formatter"],[6,"Result"],[6,"Grid"],[3,"Global"],[3,"Box"],[3,"Arc"],[3,"Rc"],[3,"Vec"],[15,"u32"],[4,"Result"],[3,"TryFromPrimitiveError"],[3,"TypeId"],[15,"array"],[3,"Error"],[3,"App"],[3,"Ui"],[3,"Context"],[3,"Frame"],[3,"Transform"],[3,"Pos2"],[4,"StandardGrid"],[8,"Hasher"]]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
