use crate::grid::standard_grids::StandardGrid;
use crate::grid::IntLocation;
use crate::gui::replay_manager::ReplayManager;
use crate::gui::AppMode;
use crate::high_level::run_high_level;
use crate::network::NetworkPlugin;
use crate::util::stopwatch::Stopwatch;
use bevy::prelude::*;
use pacbot_rs::game_engine::GameEngine;
use rapier2d::na::{Isometry2, Point2, Vector2};

pub mod grid;
pub mod gui;
pub mod physics;
pub mod util;

pub mod constants;
mod high_level;
pub mod network;
pub mod replay;
pub mod robot;

/// The state of Pacman, the game
#[derive(Default, Resource)]
pub struct PacmanGameState(GameEngine);

/// The state of Pacman over time
#[derive(Default, Resource)]
pub struct PacmanReplayManager(ReplayManager);

/// Small information generated by the physics engine
#[derive(Resource, Default)]
pub struct LightPhysicsInfo {
    /// The position used to simulate physics interactions - `None` in competition
    pub real_pos: Option<Isometry2<f32>>,
    /// The best guess position from the particle filter - `None` if particle filter is disabled
    pub pf_pos: Option<Isometry2<f32>>,
    /// Simulated distance sensor rays emanating from real_pos
    pub real_pos_rays: Vec<(Point2<f32>, Point2<f32>)>,
    /// Simulated distance sensor rays emanating from pf_pos
    pub pf_pos_rays: Vec<(Point2<f32>, Point2<f32>)>,
}

/// Options that the user can set via the GUI, shared between most processes
#[derive(Resource)]
pub struct UserSettings {
    pub mode: AppMode,
    pub enable_ai: bool,
    pub enable_pico: bool,
    pub pico_address: String,
    pub standard_grid: StandardGrid,

    pub replay_save_location: bool,
    pub replay_save_sensors: bool,
    pub replay_save_targets: bool,
}

/// Tracks the performance of the physics engine
#[derive(Default, Resource)]
pub struct PhysicsStopwatch(pub Stopwatch);

/// Tracks the performance of the particle filter
#[derive(Default, Resource)]
pub struct ParticleFilterStopwatch(pub Stopwatch);

/// Tracks the performance of GUI rendering
#[derive(Default, Resource)]
pub struct GuiStopwatch(pub Stopwatch);

/// Tracks the time AI takes to make decisions
#[derive(Default, Resource)]
pub struct AiStopwatch(pub Stopwatch);

/// Pacbot's desired path
#[derive(Default, Resource)]
pub struct TargetPath(pub Vec<IntLocation>);

/// The actual target velocity sent to the robot
#[derive(Default, Resource)]
pub struct TargetVelocity(pub Vector2<f32>, pub f32);

/// The current StandardGrid
#[derive(Default, Resource)]
pub struct StandardGridResource(StandardGrid);

fn main() {
    App::new()
        .add_plugins(MinimalPlugins)
        .add_plugins(NetworkPlugin)
        .add_systems(Update, run_high_level)
        .run();
}
