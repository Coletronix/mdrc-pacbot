// This file is generated by rust-protobuf 2.28.0. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `src/robomodules/definitions/subscribe.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_28_0;

#[derive(PartialEq,Clone,Default)]
pub struct Subscribe {
    // message fields
    pub msg_types: ::std::vec::Vec<i32>,
    dir: ::std::option::Option<Subscribe_Direction>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Subscribe {
    fn default() -> &'a Subscribe {
        <Subscribe as ::protobuf::Message>::default_instance()
    }
}

impl Subscribe {
    pub fn new() -> Subscribe {
        ::std::default::Default::default()
    }

    // repeated int32 msg_types = 1;


    pub fn get_msg_types(&self) -> &[i32] {
        &self.msg_types
    }
    pub fn clear_msg_types(&mut self) {
        self.msg_types.clear();
    }

    // Param is passed by value, moved
    pub fn set_msg_types(&mut self, v: ::std::vec::Vec<i32>) {
        self.msg_types = v;
    }

    // Mutable pointer to the field.
    pub fn mut_msg_types(&mut self) -> &mut ::std::vec::Vec<i32> {
        &mut self.msg_types
    }

    // Take field
    pub fn take_msg_types(&mut self) -> ::std::vec::Vec<i32> {
        ::std::mem::replace(&mut self.msg_types, ::std::vec::Vec::new())
    }

    // required .mateROV.Subscribe.Direction dir = 2;


    pub fn get_dir(&self) -> Subscribe_Direction {
        self.dir.unwrap_or(Subscribe_Direction::SUBSCRIBE)
    }
    pub fn clear_dir(&mut self) {
        self.dir = ::std::option::Option::None;
    }

    pub fn has_dir(&self) -> bool {
        self.dir.is_some()
    }

    // Param is passed by value, moved
    pub fn set_dir(&mut self, v: Subscribe_Direction) {
        self.dir = ::std::option::Option::Some(v);
    }
}

impl ::protobuf::Message for Subscribe {
    fn is_initialized(&self) -> bool {
        if self.dir.is_none() {
            return false;
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_int32_into(wire_type, is, &mut self.msg_types)?;
                },
                2 => {
                    ::protobuf::rt::read_proto2_enum_with_unknown_fields_into(wire_type, is, &mut self.dir, 2, &mut self.unknown_fields)?
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.msg_types {
            my_size += ::protobuf::rt::value_size(1, *value, ::protobuf::wire_format::WireTypeVarint);
        };
        if let Some(v) = self.dir {
            my_size += ::protobuf::rt::enum_size(2, v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.msg_types {
            os.write_int32(1, *v)?;
        };
        if let Some(v) = self.dir {
            os.write_enum(2, ::protobuf::ProtobufEnum::value(&v))?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Subscribe {
        Subscribe::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_vec_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "msg_types",
                |m: &Subscribe| { &m.msg_types },
                |m: &mut Subscribe| { &mut m.msg_types },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeEnum<Subscribe_Direction>>(
                "dir",
                |m: &Subscribe| { &m.dir },
                |m: &mut Subscribe| { &mut m.dir },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Subscribe>(
                "Subscribe",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Subscribe {
        static instance: ::protobuf::rt::LazyV2<Subscribe> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Subscribe::new)
    }
}

impl ::protobuf::Clear for Subscribe {
    fn clear(&mut self) {
        self.msg_types.clear();
        self.dir = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Subscribe {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Subscribe {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum Subscribe_Direction {
    SUBSCRIBE = 0,
    UNSUBSCRIBE = 1,
}

impl ::protobuf::ProtobufEnum for Subscribe_Direction {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<Subscribe_Direction> {
        match value {
            0 => ::std::option::Option::Some(Subscribe_Direction::SUBSCRIBE),
            1 => ::std::option::Option::Some(Subscribe_Direction::UNSUBSCRIBE),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [Subscribe_Direction] = &[
            Subscribe_Direction::SUBSCRIBE,
            Subscribe_Direction::UNSUBSCRIBE,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            ::protobuf::reflect::EnumDescriptor::new_pb_name::<Subscribe_Direction>("Subscribe.Direction", file_descriptor_proto())
        })
    }
}

impl ::std::marker::Copy for Subscribe_Direction {
}

impl ::std::default::Default for Subscribe_Direction {
    fn default() -> Self {
        Subscribe_Direction::SUBSCRIBE
    }
}

impl ::protobuf::reflect::ProtobufValue for Subscribe_Direction {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n+src/robomodules/definitions/subscribe.proto\x12\x07mateROV\"\x85\x01\
    \n\tSubscribe\x12\x1b\n\tmsg_types\x18\x01\x20\x03(\x05R\x08msgTypes\x12\
    .\n\x03dir\x18\x02\x20\x02(\x0e2\x1c.mateROV.Subscribe.DirectionR\x03dir\
    \"+\n\tDirection\x12\r\n\tSUBSCRIBE\x10\0\x12\x0f\n\x0bUNSUBSCRIBE\x10\
    \x01\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
