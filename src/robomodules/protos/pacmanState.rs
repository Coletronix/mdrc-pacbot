// This file is generated by rust-protobuf 2.28.0. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `src/robomodules/definitions/pacmanState.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_28_0;

#[derive(PartialEq,Clone,Default)]
pub struct PacmanState {
    // message fields
    pub pacman: ::protobuf::SingularPtrField<PacmanState_AgentState>,
    pub red_ghost: ::protobuf::SingularPtrField<PacmanState_AgentState>,
    pub pink_ghost: ::protobuf::SingularPtrField<PacmanState_AgentState>,
    pub orange_ghost: ::protobuf::SingularPtrField<PacmanState_AgentState>,
    pub blue_ghost: ::protobuf::SingularPtrField<PacmanState_AgentState>,
    mode: ::std::option::Option<PacmanState_GameMode>,
    frightened_timer: ::std::option::Option<i32>,
    score: ::std::option::Option<i32>,
    pub grid: ::std::vec::Vec<PacmanState_GridElement>,
    grid_columns: ::std::option::Option<i32>,
    lives: ::std::option::Option<i32>,
    update_ticks: ::std::option::Option<i32>,
    ticks_per_update: ::std::option::Option<i32>,
    elapsed_time: ::std::option::Option<f32>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a PacmanState {
    fn default() -> &'a PacmanState {
        <PacmanState as ::protobuf::Message>::default_instance()
    }
}

impl PacmanState {
    pub fn new() -> PacmanState {
        ::std::default::Default::default()
    }

    // required .gameEngine.PacmanState.AgentState pacman = 1;


    pub fn get_pacman(&self) -> &PacmanState_AgentState {
        self.pacman.as_ref().unwrap_or_else(|| <PacmanState_AgentState as ::protobuf::Message>::default_instance())
    }
    pub fn clear_pacman(&mut self) {
        self.pacman.clear();
    }

    pub fn has_pacman(&self) -> bool {
        self.pacman.is_some()
    }

    // Param is passed by value, moved
    pub fn set_pacman(&mut self, v: PacmanState_AgentState) {
        self.pacman = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_pacman(&mut self) -> &mut PacmanState_AgentState {
        if self.pacman.is_none() {
            self.pacman.set_default();
        }
        self.pacman.as_mut().unwrap()
    }

    // Take field
    pub fn take_pacman(&mut self) -> PacmanState_AgentState {
        self.pacman.take().unwrap_or_else(|| PacmanState_AgentState::new())
    }

    // required .gameEngine.PacmanState.AgentState red_ghost = 2;


    pub fn get_red_ghost(&self) -> &PacmanState_AgentState {
        self.red_ghost.as_ref().unwrap_or_else(|| <PacmanState_AgentState as ::protobuf::Message>::default_instance())
    }
    pub fn clear_red_ghost(&mut self) {
        self.red_ghost.clear();
    }

    pub fn has_red_ghost(&self) -> bool {
        self.red_ghost.is_some()
    }

    // Param is passed by value, moved
    pub fn set_red_ghost(&mut self, v: PacmanState_AgentState) {
        self.red_ghost = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_red_ghost(&mut self) -> &mut PacmanState_AgentState {
        if self.red_ghost.is_none() {
            self.red_ghost.set_default();
        }
        self.red_ghost.as_mut().unwrap()
    }

    // Take field
    pub fn take_red_ghost(&mut self) -> PacmanState_AgentState {
        self.red_ghost.take().unwrap_or_else(|| PacmanState_AgentState::new())
    }

    // required .gameEngine.PacmanState.AgentState pink_ghost = 3;


    pub fn get_pink_ghost(&self) -> &PacmanState_AgentState {
        self.pink_ghost.as_ref().unwrap_or_else(|| <PacmanState_AgentState as ::protobuf::Message>::default_instance())
    }
    pub fn clear_pink_ghost(&mut self) {
        self.pink_ghost.clear();
    }

    pub fn has_pink_ghost(&self) -> bool {
        self.pink_ghost.is_some()
    }

    // Param is passed by value, moved
    pub fn set_pink_ghost(&mut self, v: PacmanState_AgentState) {
        self.pink_ghost = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_pink_ghost(&mut self) -> &mut PacmanState_AgentState {
        if self.pink_ghost.is_none() {
            self.pink_ghost.set_default();
        }
        self.pink_ghost.as_mut().unwrap()
    }

    // Take field
    pub fn take_pink_ghost(&mut self) -> PacmanState_AgentState {
        self.pink_ghost.take().unwrap_or_else(|| PacmanState_AgentState::new())
    }

    // required .gameEngine.PacmanState.AgentState orange_ghost = 4;


    pub fn get_orange_ghost(&self) -> &PacmanState_AgentState {
        self.orange_ghost.as_ref().unwrap_or_else(|| <PacmanState_AgentState as ::protobuf::Message>::default_instance())
    }
    pub fn clear_orange_ghost(&mut self) {
        self.orange_ghost.clear();
    }

    pub fn has_orange_ghost(&self) -> bool {
        self.orange_ghost.is_some()
    }

    // Param is passed by value, moved
    pub fn set_orange_ghost(&mut self, v: PacmanState_AgentState) {
        self.orange_ghost = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_orange_ghost(&mut self) -> &mut PacmanState_AgentState {
        if self.orange_ghost.is_none() {
            self.orange_ghost.set_default();
        }
        self.orange_ghost.as_mut().unwrap()
    }

    // Take field
    pub fn take_orange_ghost(&mut self) -> PacmanState_AgentState {
        self.orange_ghost.take().unwrap_or_else(|| PacmanState_AgentState::new())
    }

    // required .gameEngine.PacmanState.AgentState blue_ghost = 5;


    pub fn get_blue_ghost(&self) -> &PacmanState_AgentState {
        self.blue_ghost.as_ref().unwrap_or_else(|| <PacmanState_AgentState as ::protobuf::Message>::default_instance())
    }
    pub fn clear_blue_ghost(&mut self) {
        self.blue_ghost.clear();
    }

    pub fn has_blue_ghost(&self) -> bool {
        self.blue_ghost.is_some()
    }

    // Param is passed by value, moved
    pub fn set_blue_ghost(&mut self, v: PacmanState_AgentState) {
        self.blue_ghost = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_blue_ghost(&mut self) -> &mut PacmanState_AgentState {
        if self.blue_ghost.is_none() {
            self.blue_ghost.set_default();
        }
        self.blue_ghost.as_mut().unwrap()
    }

    // Take field
    pub fn take_blue_ghost(&mut self) -> PacmanState_AgentState {
        self.blue_ghost.take().unwrap_or_else(|| PacmanState_AgentState::new())
    }

    // required .gameEngine.PacmanState.GameMode mode = 6;


    pub fn get_mode(&self) -> PacmanState_GameMode {
        self.mode.unwrap_or(PacmanState_GameMode::CHASE)
    }
    pub fn clear_mode(&mut self) {
        self.mode = ::std::option::Option::None;
    }

    pub fn has_mode(&self) -> bool {
        self.mode.is_some()
    }

    // Param is passed by value, moved
    pub fn set_mode(&mut self, v: PacmanState_GameMode) {
        self.mode = ::std::option::Option::Some(v);
    }

    // required int32 frightened_timer = 7;


    pub fn get_frightened_timer(&self) -> i32 {
        self.frightened_timer.unwrap_or(0)
    }
    pub fn clear_frightened_timer(&mut self) {
        self.frightened_timer = ::std::option::Option::None;
    }

    pub fn has_frightened_timer(&self) -> bool {
        self.frightened_timer.is_some()
    }

    // Param is passed by value, moved
    pub fn set_frightened_timer(&mut self, v: i32) {
        self.frightened_timer = ::std::option::Option::Some(v);
    }

    // required int32 score = 8;


    pub fn get_score(&self) -> i32 {
        self.score.unwrap_or(0)
    }
    pub fn clear_score(&mut self) {
        self.score = ::std::option::Option::None;
    }

    pub fn has_score(&self) -> bool {
        self.score.is_some()
    }

    // Param is passed by value, moved
    pub fn set_score(&mut self, v: i32) {
        self.score = ::std::option::Option::Some(v);
    }

    // repeated .gameEngine.PacmanState.GridElement grid = 9;


    pub fn get_grid(&self) -> &[PacmanState_GridElement] {
        &self.grid
    }
    pub fn clear_grid(&mut self) {
        self.grid.clear();
    }

    // Param is passed by value, moved
    pub fn set_grid(&mut self, v: ::std::vec::Vec<PacmanState_GridElement>) {
        self.grid = v;
    }

    // Mutable pointer to the field.
    pub fn mut_grid(&mut self) -> &mut ::std::vec::Vec<PacmanState_GridElement> {
        &mut self.grid
    }

    // Take field
    pub fn take_grid(&mut self) -> ::std::vec::Vec<PacmanState_GridElement> {
        ::std::mem::replace(&mut self.grid, ::std::vec::Vec::new())
    }

    // required int32 grid_columns = 10;


    pub fn get_grid_columns(&self) -> i32 {
        self.grid_columns.unwrap_or(0)
    }
    pub fn clear_grid_columns(&mut self) {
        self.grid_columns = ::std::option::Option::None;
    }

    pub fn has_grid_columns(&self) -> bool {
        self.grid_columns.is_some()
    }

    // Param is passed by value, moved
    pub fn set_grid_columns(&mut self, v: i32) {
        self.grid_columns = ::std::option::Option::Some(v);
    }

    // required int32 lives = 11;


    pub fn get_lives(&self) -> i32 {
        self.lives.unwrap_or(0)
    }
    pub fn clear_lives(&mut self) {
        self.lives = ::std::option::Option::None;
    }

    pub fn has_lives(&self) -> bool {
        self.lives.is_some()
    }

    // Param is passed by value, moved
    pub fn set_lives(&mut self, v: i32) {
        self.lives = ::std::option::Option::Some(v);
    }

    // required int32 update_ticks = 12;


    pub fn get_update_ticks(&self) -> i32 {
        self.update_ticks.unwrap_or(0)
    }
    pub fn clear_update_ticks(&mut self) {
        self.update_ticks = ::std::option::Option::None;
    }

    pub fn has_update_ticks(&self) -> bool {
        self.update_ticks.is_some()
    }

    // Param is passed by value, moved
    pub fn set_update_ticks(&mut self, v: i32) {
        self.update_ticks = ::std::option::Option::Some(v);
    }

    // required int32 ticks_per_update = 13;


    pub fn get_ticks_per_update(&self) -> i32 {
        self.ticks_per_update.unwrap_or(0)
    }
    pub fn clear_ticks_per_update(&mut self) {
        self.ticks_per_update = ::std::option::Option::None;
    }

    pub fn has_ticks_per_update(&self) -> bool {
        self.ticks_per_update.is_some()
    }

    // Param is passed by value, moved
    pub fn set_ticks_per_update(&mut self, v: i32) {
        self.ticks_per_update = ::std::option::Option::Some(v);
    }

    // optional float elapsed_time = 14;


    pub fn get_elapsed_time(&self) -> f32 {
        self.elapsed_time.unwrap_or(0.)
    }
    pub fn clear_elapsed_time(&mut self) {
        self.elapsed_time = ::std::option::Option::None;
    }

    pub fn has_elapsed_time(&self) -> bool {
        self.elapsed_time.is_some()
    }

    // Param is passed by value, moved
    pub fn set_elapsed_time(&mut self, v: f32) {
        self.elapsed_time = ::std::option::Option::Some(v);
    }
}

impl ::protobuf::Message for PacmanState {
    fn is_initialized(&self) -> bool {
        if self.pacman.is_none() {
            return false;
        }
        if self.red_ghost.is_none() {
            return false;
        }
        if self.pink_ghost.is_none() {
            return false;
        }
        if self.orange_ghost.is_none() {
            return false;
        }
        if self.blue_ghost.is_none() {
            return false;
        }
        if self.mode.is_none() {
            return false;
        }
        if self.frightened_timer.is_none() {
            return false;
        }
        if self.score.is_none() {
            return false;
        }
        if self.grid_columns.is_none() {
            return false;
        }
        if self.lives.is_none() {
            return false;
        }
        if self.update_ticks.is_none() {
            return false;
        }
        if self.ticks_per_update.is_none() {
            return false;
        }
        for v in &self.pacman {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.red_ghost {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.pink_ghost {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.orange_ghost {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.blue_ghost {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.pacman)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.red_ghost)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.pink_ghost)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.orange_ghost)?;
                },
                5 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.blue_ghost)?;
                },
                6 => {
                    ::protobuf::rt::read_proto2_enum_with_unknown_fields_into(wire_type, is, &mut self.mode, 6, &mut self.unknown_fields)?
                },
                7 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.frightened_timer = ::std::option::Option::Some(tmp);
                },
                8 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.score = ::std::option::Option::Some(tmp);
                },
                9 => {
                    ::protobuf::rt::read_repeated_enum_with_unknown_fields_into(wire_type, is, &mut self.grid, 9, &mut self.unknown_fields)?
                },
                10 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.grid_columns = ::std::option::Option::Some(tmp);
                },
                11 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.lives = ::std::option::Option::Some(tmp);
                },
                12 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.update_ticks = ::std::option::Option::Some(tmp);
                },
                13 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.ticks_per_update = ::std::option::Option::Some(tmp);
                },
                14 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed32 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_float()?;
                    self.elapsed_time = ::std::option::Option::Some(tmp);
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.pacman.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.red_ghost.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.pink_ghost.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.orange_ghost.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.blue_ghost.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(v) = self.mode {
            my_size += ::protobuf::rt::enum_size(6, v);
        }
        if let Some(v) = self.frightened_timer {
            my_size += ::protobuf::rt::value_size(7, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.score {
            my_size += ::protobuf::rt::value_size(8, v, ::protobuf::wire_format::WireTypeVarint);
        }
        for value in &self.grid {
            my_size += ::protobuf::rt::enum_size(9, *value);
        };
        if let Some(v) = self.grid_columns {
            my_size += ::protobuf::rt::value_size(10, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.lives {
            my_size += ::protobuf::rt::value_size(11, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.update_ticks {
            my_size += ::protobuf::rt::value_size(12, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.ticks_per_update {
            my_size += ::protobuf::rt::value_size(13, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.elapsed_time {
            my_size += 5;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.pacman.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.red_ghost.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.pink_ghost.as_ref() {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.orange_ghost.as_ref() {
            os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.blue_ghost.as_ref() {
            os.write_tag(5, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(v) = self.mode {
            os.write_enum(6, ::protobuf::ProtobufEnum::value(&v))?;
        }
        if let Some(v) = self.frightened_timer {
            os.write_int32(7, v)?;
        }
        if let Some(v) = self.score {
            os.write_int32(8, v)?;
        }
        for v in &self.grid {
            os.write_enum(9, ::protobuf::ProtobufEnum::value(v))?;
        };
        if let Some(v) = self.grid_columns {
            os.write_int32(10, v)?;
        }
        if let Some(v) = self.lives {
            os.write_int32(11, v)?;
        }
        if let Some(v) = self.update_ticks {
            os.write_int32(12, v)?;
        }
        if let Some(v) = self.ticks_per_update {
            os.write_int32(13, v)?;
        }
        if let Some(v) = self.elapsed_time {
            os.write_float(14, v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> PacmanState {
        PacmanState::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<PacmanState_AgentState>>(
                "pacman",
                |m: &PacmanState| { &m.pacman },
                |m: &mut PacmanState| { &mut m.pacman },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<PacmanState_AgentState>>(
                "red_ghost",
                |m: &PacmanState| { &m.red_ghost },
                |m: &mut PacmanState| { &mut m.red_ghost },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<PacmanState_AgentState>>(
                "pink_ghost",
                |m: &PacmanState| { &m.pink_ghost },
                |m: &mut PacmanState| { &mut m.pink_ghost },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<PacmanState_AgentState>>(
                "orange_ghost",
                |m: &PacmanState| { &m.orange_ghost },
                |m: &mut PacmanState| { &mut m.orange_ghost },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<PacmanState_AgentState>>(
                "blue_ghost",
                |m: &PacmanState| { &m.blue_ghost },
                |m: &mut PacmanState| { &mut m.blue_ghost },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeEnum<PacmanState_GameMode>>(
                "mode",
                |m: &PacmanState| { &m.mode },
                |m: &mut PacmanState| { &mut m.mode },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "frightened_timer",
                |m: &PacmanState| { &m.frightened_timer },
                |m: &mut PacmanState| { &mut m.frightened_timer },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "score",
                |m: &PacmanState| { &m.score },
                |m: &mut PacmanState| { &mut m.score },
            ));
            fields.push(::protobuf::reflect::accessor::make_vec_accessor::<_, ::protobuf::types::ProtobufTypeEnum<PacmanState_GridElement>>(
                "grid",
                |m: &PacmanState| { &m.grid },
                |m: &mut PacmanState| { &mut m.grid },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "grid_columns",
                |m: &PacmanState| { &m.grid_columns },
                |m: &mut PacmanState| { &mut m.grid_columns },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "lives",
                |m: &PacmanState| { &m.lives },
                |m: &mut PacmanState| { &mut m.lives },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "update_ticks",
                |m: &PacmanState| { &m.update_ticks },
                |m: &mut PacmanState| { &mut m.update_ticks },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "ticks_per_update",
                |m: &PacmanState| { &m.ticks_per_update },
                |m: &mut PacmanState| { &mut m.ticks_per_update },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeFloat>(
                "elapsed_time",
                |m: &PacmanState| { &m.elapsed_time },
                |m: &mut PacmanState| { &mut m.elapsed_time },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<PacmanState>(
                "PacmanState",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static PacmanState {
        static instance: ::protobuf::rt::LazyV2<PacmanState> = ::protobuf::rt::LazyV2::INIT;
        instance.get(PacmanState::new)
    }
}

impl ::protobuf::Clear for PacmanState {
    fn clear(&mut self) {
        self.pacman.clear();
        self.red_ghost.clear();
        self.pink_ghost.clear();
        self.orange_ghost.clear();
        self.blue_ghost.clear();
        self.mode = ::std::option::Option::None;
        self.frightened_timer = ::std::option::Option::None;
        self.score = ::std::option::Option::None;
        self.grid.clear();
        self.grid_columns = ::std::option::Option::None;
        self.lives = ::std::option::Option::None;
        self.update_ticks = ::std::option::Option::None;
        self.ticks_per_update = ::std::option::Option::None;
        self.elapsed_time = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for PacmanState {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for PacmanState {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct PacmanState_AgentState {
    // message fields
    x: ::std::option::Option<i32>,
    y: ::std::option::Option<i32>,
    direction: ::std::option::Option<PacmanState_Direction>,
    frightened_counter: ::std::option::Option<i32>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a PacmanState_AgentState {
    fn default() -> &'a PacmanState_AgentState {
        <PacmanState_AgentState as ::protobuf::Message>::default_instance()
    }
}

impl PacmanState_AgentState {
    pub fn new() -> PacmanState_AgentState {
        ::std::default::Default::default()
    }

    // required int32 x = 1;


    pub fn get_x(&self) -> i32 {
        self.x.unwrap_or(0)
    }
    pub fn clear_x(&mut self) {
        self.x = ::std::option::Option::None;
    }

    pub fn has_x(&self) -> bool {
        self.x.is_some()
    }

    // Param is passed by value, moved
    pub fn set_x(&mut self, v: i32) {
        self.x = ::std::option::Option::Some(v);
    }

    // required int32 y = 2;


    pub fn get_y(&self) -> i32 {
        self.y.unwrap_or(0)
    }
    pub fn clear_y(&mut self) {
        self.y = ::std::option::Option::None;
    }

    pub fn has_y(&self) -> bool {
        self.y.is_some()
    }

    // Param is passed by value, moved
    pub fn set_y(&mut self, v: i32) {
        self.y = ::std::option::Option::Some(v);
    }

    // optional .gameEngine.PacmanState.Direction direction = 3;


    pub fn get_direction(&self) -> PacmanState_Direction {
        self.direction.unwrap_or(PacmanState_Direction::UP)
    }
    pub fn clear_direction(&mut self) {
        self.direction = ::std::option::Option::None;
    }

    pub fn has_direction(&self) -> bool {
        self.direction.is_some()
    }

    // Param is passed by value, moved
    pub fn set_direction(&mut self, v: PacmanState_Direction) {
        self.direction = ::std::option::Option::Some(v);
    }

    // optional int32 frightened_counter = 4;


    pub fn get_frightened_counter(&self) -> i32 {
        self.frightened_counter.unwrap_or(0)
    }
    pub fn clear_frightened_counter(&mut self) {
        self.frightened_counter = ::std::option::Option::None;
    }

    pub fn has_frightened_counter(&self) -> bool {
        self.frightened_counter.is_some()
    }

    // Param is passed by value, moved
    pub fn set_frightened_counter(&mut self, v: i32) {
        self.frightened_counter = ::std::option::Option::Some(v);
    }
}

impl ::protobuf::Message for PacmanState_AgentState {
    fn is_initialized(&self) -> bool {
        if self.x.is_none() {
            return false;
        }
        if self.y.is_none() {
            return false;
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.x = ::std::option::Option::Some(tmp);
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.y = ::std::option::Option::Some(tmp);
                },
                3 => {
                    ::protobuf::rt::read_proto2_enum_with_unknown_fields_into(wire_type, is, &mut self.direction, 3, &mut self.unknown_fields)?
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.frightened_counter = ::std::option::Option::Some(tmp);
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.x {
            my_size += ::protobuf::rt::value_size(1, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.y {
            my_size += ::protobuf::rt::value_size(2, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.direction {
            my_size += ::protobuf::rt::enum_size(3, v);
        }
        if let Some(v) = self.frightened_counter {
            my_size += ::protobuf::rt::value_size(4, v, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.x {
            os.write_int32(1, v)?;
        }
        if let Some(v) = self.y {
            os.write_int32(2, v)?;
        }
        if let Some(v) = self.direction {
            os.write_enum(3, ::protobuf::ProtobufEnum::value(&v))?;
        }
        if let Some(v) = self.frightened_counter {
            os.write_int32(4, v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> PacmanState_AgentState {
        PacmanState_AgentState::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "x",
                |m: &PacmanState_AgentState| { &m.x },
                |m: &mut PacmanState_AgentState| { &mut m.x },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "y",
                |m: &PacmanState_AgentState| { &m.y },
                |m: &mut PacmanState_AgentState| { &mut m.y },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeEnum<PacmanState_Direction>>(
                "direction",
                |m: &PacmanState_AgentState| { &m.direction },
                |m: &mut PacmanState_AgentState| { &mut m.direction },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "frightened_counter",
                |m: &PacmanState_AgentState| { &m.frightened_counter },
                |m: &mut PacmanState_AgentState| { &mut m.frightened_counter },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<PacmanState_AgentState>(
                "PacmanState.AgentState",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static PacmanState_AgentState {
        static instance: ::protobuf::rt::LazyV2<PacmanState_AgentState> = ::protobuf::rt::LazyV2::INIT;
        instance.get(PacmanState_AgentState::new)
    }
}

impl ::protobuf::Clear for PacmanState_AgentState {
    fn clear(&mut self) {
        self.x = ::std::option::Option::None;
        self.y = ::std::option::Option::None;
        self.direction = ::std::option::Option::None;
        self.frightened_counter = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for PacmanState_AgentState {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for PacmanState_AgentState {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum PacmanState_GameMode {
    CHASE = 0,
    SCATTER = 1,
    FRIGHTENED = 2,
    PAUSED = 3,
}

impl ::protobuf::ProtobufEnum for PacmanState_GameMode {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<PacmanState_GameMode> {
        match value {
            0 => ::std::option::Option::Some(PacmanState_GameMode::CHASE),
            1 => ::std::option::Option::Some(PacmanState_GameMode::SCATTER),
            2 => ::std::option::Option::Some(PacmanState_GameMode::FRIGHTENED),
            3 => ::std::option::Option::Some(PacmanState_GameMode::PAUSED),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [PacmanState_GameMode] = &[
            PacmanState_GameMode::CHASE,
            PacmanState_GameMode::SCATTER,
            PacmanState_GameMode::FRIGHTENED,
            PacmanState_GameMode::PAUSED,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            ::protobuf::reflect::EnumDescriptor::new_pb_name::<PacmanState_GameMode>("PacmanState.GameMode", file_descriptor_proto())
        })
    }
}

impl ::std::marker::Copy for PacmanState_GameMode {
}

impl ::std::default::Default for PacmanState_GameMode {
    fn default() -> Self {
        PacmanState_GameMode::CHASE
    }
}

impl ::protobuf::reflect::ProtobufValue for PacmanState_GameMode {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum PacmanState_GridElement {
    WALL = 0,
    PELLET = 1,
    POWER_PELLET = 2,
    EMPTY = 3,
    CHERRY = 4,
}

impl ::protobuf::ProtobufEnum for PacmanState_GridElement {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<PacmanState_GridElement> {
        match value {
            0 => ::std::option::Option::Some(PacmanState_GridElement::WALL),
            1 => ::std::option::Option::Some(PacmanState_GridElement::PELLET),
            2 => ::std::option::Option::Some(PacmanState_GridElement::POWER_PELLET),
            3 => ::std::option::Option::Some(PacmanState_GridElement::EMPTY),
            4 => ::std::option::Option::Some(PacmanState_GridElement::CHERRY),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [PacmanState_GridElement] = &[
            PacmanState_GridElement::WALL,
            PacmanState_GridElement::PELLET,
            PacmanState_GridElement::POWER_PELLET,
            PacmanState_GridElement::EMPTY,
            PacmanState_GridElement::CHERRY,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            ::protobuf::reflect::EnumDescriptor::new_pb_name::<PacmanState_GridElement>("PacmanState.GridElement", file_descriptor_proto())
        })
    }
}

impl ::std::marker::Copy for PacmanState_GridElement {
}

impl ::std::default::Default for PacmanState_GridElement {
    fn default() -> Self {
        PacmanState_GridElement::WALL
    }
}

impl ::protobuf::reflect::ProtobufValue for PacmanState_GridElement {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum PacmanState_Direction {
    UP = 0,
    DOWN = 1,
    LEFT = 2,
    RIGHT = 3,
}

impl ::protobuf::ProtobufEnum for PacmanState_Direction {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<PacmanState_Direction> {
        match value {
            0 => ::std::option::Option::Some(PacmanState_Direction::UP),
            1 => ::std::option::Option::Some(PacmanState_Direction::DOWN),
            2 => ::std::option::Option::Some(PacmanState_Direction::LEFT),
            3 => ::std::option::Option::Some(PacmanState_Direction::RIGHT),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [PacmanState_Direction] = &[
            PacmanState_Direction::UP,
            PacmanState_Direction::DOWN,
            PacmanState_Direction::LEFT,
            PacmanState_Direction::RIGHT,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            ::protobuf::reflect::EnumDescriptor::new_pb_name::<PacmanState_Direction>("PacmanState.Direction", file_descriptor_proto())
        })
    }
}

impl ::std::marker::Copy for PacmanState_Direction {
}

impl ::std::default::Default for PacmanState_Direction {
    fn default() -> Self {
        PacmanState_Direction::UP
    }
}

impl ::protobuf::reflect::ProtobufValue for PacmanState_Direction {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n-src/robomodules/definitions/pacmanState.proto\x12\ngameEngine\"\x8d\
    \x08\n\x0bPacmanState\x12:\n\x06pacman\x18\x01\x20\x02(\x0b2\".gameEngin\
    e.PacmanState.AgentStateR\x06pacman\x12?\n\tred_ghost\x18\x02\x20\x02(\
    \x0b2\".gameEngine.PacmanState.AgentStateR\x08redGhost\x12A\n\npink_ghos\
    t\x18\x03\x20\x02(\x0b2\".gameEngine.PacmanState.AgentStateR\tpinkGhost\
    \x12E\n\x0corange_ghost\x18\x04\x20\x02(\x0b2\".gameEngine.PacmanState.A\
    gentStateR\x0borangeGhost\x12A\n\nblue_ghost\x18\x05\x20\x02(\x0b2\".gam\
    eEngine.PacmanState.AgentStateR\tblueGhost\x124\n\x04mode\x18\x06\x20\
    \x02(\x0e2\x20.gameEngine.PacmanState.GameModeR\x04mode\x12)\n\x10fright\
    ened_timer\x18\x07\x20\x02(\x05R\x0ffrightenedTimer\x12\x14\n\x05score\
    \x18\x08\x20\x02(\x05R\x05score\x127\n\x04grid\x18\t\x20\x03(\x0e2#.game\
    Engine.PacmanState.GridElementR\x04grid\x12!\n\x0cgrid_columns\x18\n\x20\
    \x02(\x05R\x0bgridColumns\x12\x14\n\x05lives\x18\x0b\x20\x02(\x05R\x05li\
    ves\x12!\n\x0cupdate_ticks\x18\x0c\x20\x02(\x05R\x0bupdateTicks\x12(\n\
    \x10ticks_per_update\x18\r\x20\x02(\x05R\x0eticksPerUpdate\x12!\n\x0cela\
    psed_time\x18\x0e\x20\x01(\x02R\x0belapsedTime\x1a\x98\x01\n\nAgentState\
    \x12\x0c\n\x01x\x18\x01\x20\x02(\x05R\x01x\x12\x0c\n\x01y\x18\x02\x20\
    \x02(\x05R\x01y\x12?\n\tdirection\x18\x03\x20\x01(\x0e2!.gameEngine.Pacm\
    anState.DirectionR\tdirection\x12-\n\x12frightened_counter\x18\x04\x20\
    \x01(\x05R\x11frightenedCounter\">\n\x08GameMode\x12\t\n\x05CHASE\x10\0\
    \x12\x0b\n\x07SCATTER\x10\x01\x12\x0e\n\nFRIGHTENED\x10\x02\x12\n\n\x06P\
    AUSED\x10\x03\"L\n\x0bGridElement\x12\x08\n\x04WALL\x10\0\x12\n\n\x06PEL\
    LET\x10\x01\x12\x10\n\x0cPOWER_PELLET\x10\x02\x12\t\n\x05EMPTY\x10\x03\
    \x12\n\n\x06CHERRY\x10\x04\"2\n\tDirection\x12\x06\n\x02UP\x10\0\x12\x08\
    \n\x04DOWN\x10\x01\x12\x08\n\x04LEFT\x10\x02\x12\t\n\x05RIGHT\x10\x03\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
