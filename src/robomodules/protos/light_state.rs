// This file is generated by rust-protobuf 2.28.0. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `src/robomodules/definitions/light_state.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_28_0;

#[derive(PartialEq,Clone,Default)]
pub struct LightState {
    // message fields
    pub pacman: ::protobuf::SingularPtrField<LightState_AgentState>,
    pub red_ghost: ::protobuf::SingularPtrField<LightState_AgentState>,
    pub pink_ghost: ::protobuf::SingularPtrField<LightState_AgentState>,
    pub orange_ghost: ::protobuf::SingularPtrField<LightState_AgentState>,
    pub blue_ghost: ::protobuf::SingularPtrField<LightState_AgentState>,
    cherry: ::std::option::Option<bool>,
    mode: ::std::option::Option<LightState_GameMode>,
    score: ::std::option::Option<i32>,
    lives: ::std::option::Option<i32>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a LightState {
    fn default() -> &'a LightState {
        <LightState as ::protobuf::Message>::default_instance()
    }
}

impl LightState {
    pub fn new() -> LightState {
        ::std::default::Default::default()
    }

    // required .gameEngine.LightState.AgentState pacman = 1;


    pub fn get_pacman(&self) -> &LightState_AgentState {
        self.pacman.as_ref().unwrap_or_else(|| <LightState_AgentState as ::protobuf::Message>::default_instance())
    }
    pub fn clear_pacman(&mut self) {
        self.pacman.clear();
    }

    pub fn has_pacman(&self) -> bool {
        self.pacman.is_some()
    }

    // Param is passed by value, moved
    pub fn set_pacman(&mut self, v: LightState_AgentState) {
        self.pacman = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_pacman(&mut self) -> &mut LightState_AgentState {
        if self.pacman.is_none() {
            self.pacman.set_default();
        }
        self.pacman.as_mut().unwrap()
    }

    // Take field
    pub fn take_pacman(&mut self) -> LightState_AgentState {
        self.pacman.take().unwrap_or_else(|| LightState_AgentState::new())
    }

    // required .gameEngine.LightState.AgentState red_ghost = 2;


    pub fn get_red_ghost(&self) -> &LightState_AgentState {
        self.red_ghost.as_ref().unwrap_or_else(|| <LightState_AgentState as ::protobuf::Message>::default_instance())
    }
    pub fn clear_red_ghost(&mut self) {
        self.red_ghost.clear();
    }

    pub fn has_red_ghost(&self) -> bool {
        self.red_ghost.is_some()
    }

    // Param is passed by value, moved
    pub fn set_red_ghost(&mut self, v: LightState_AgentState) {
        self.red_ghost = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_red_ghost(&mut self) -> &mut LightState_AgentState {
        if self.red_ghost.is_none() {
            self.red_ghost.set_default();
        }
        self.red_ghost.as_mut().unwrap()
    }

    // Take field
    pub fn take_red_ghost(&mut self) -> LightState_AgentState {
        self.red_ghost.take().unwrap_or_else(|| LightState_AgentState::new())
    }

    // required .gameEngine.LightState.AgentState pink_ghost = 3;


    pub fn get_pink_ghost(&self) -> &LightState_AgentState {
        self.pink_ghost.as_ref().unwrap_or_else(|| <LightState_AgentState as ::protobuf::Message>::default_instance())
    }
    pub fn clear_pink_ghost(&mut self) {
        self.pink_ghost.clear();
    }

    pub fn has_pink_ghost(&self) -> bool {
        self.pink_ghost.is_some()
    }

    // Param is passed by value, moved
    pub fn set_pink_ghost(&mut self, v: LightState_AgentState) {
        self.pink_ghost = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_pink_ghost(&mut self) -> &mut LightState_AgentState {
        if self.pink_ghost.is_none() {
            self.pink_ghost.set_default();
        }
        self.pink_ghost.as_mut().unwrap()
    }

    // Take field
    pub fn take_pink_ghost(&mut self) -> LightState_AgentState {
        self.pink_ghost.take().unwrap_or_else(|| LightState_AgentState::new())
    }

    // required .gameEngine.LightState.AgentState orange_ghost = 4;


    pub fn get_orange_ghost(&self) -> &LightState_AgentState {
        self.orange_ghost.as_ref().unwrap_or_else(|| <LightState_AgentState as ::protobuf::Message>::default_instance())
    }
    pub fn clear_orange_ghost(&mut self) {
        self.orange_ghost.clear();
    }

    pub fn has_orange_ghost(&self) -> bool {
        self.orange_ghost.is_some()
    }

    // Param is passed by value, moved
    pub fn set_orange_ghost(&mut self, v: LightState_AgentState) {
        self.orange_ghost = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_orange_ghost(&mut self) -> &mut LightState_AgentState {
        if self.orange_ghost.is_none() {
            self.orange_ghost.set_default();
        }
        self.orange_ghost.as_mut().unwrap()
    }

    // Take field
    pub fn take_orange_ghost(&mut self) -> LightState_AgentState {
        self.orange_ghost.take().unwrap_or_else(|| LightState_AgentState::new())
    }

    // required .gameEngine.LightState.AgentState blue_ghost = 5;


    pub fn get_blue_ghost(&self) -> &LightState_AgentState {
        self.blue_ghost.as_ref().unwrap_or_else(|| <LightState_AgentState as ::protobuf::Message>::default_instance())
    }
    pub fn clear_blue_ghost(&mut self) {
        self.blue_ghost.clear();
    }

    pub fn has_blue_ghost(&self) -> bool {
        self.blue_ghost.is_some()
    }

    // Param is passed by value, moved
    pub fn set_blue_ghost(&mut self, v: LightState_AgentState) {
        self.blue_ghost = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_blue_ghost(&mut self) -> &mut LightState_AgentState {
        if self.blue_ghost.is_none() {
            self.blue_ghost.set_default();
        }
        self.blue_ghost.as_mut().unwrap()
    }

    // Take field
    pub fn take_blue_ghost(&mut self) -> LightState_AgentState {
        self.blue_ghost.take().unwrap_or_else(|| LightState_AgentState::new())
    }

    // required bool cherry = 12;


    pub fn get_cherry(&self) -> bool {
        self.cherry.unwrap_or(false)
    }
    pub fn clear_cherry(&mut self) {
        self.cherry = ::std::option::Option::None;
    }

    pub fn has_cherry(&self) -> bool {
        self.cherry.is_some()
    }

    // Param is passed by value, moved
    pub fn set_cherry(&mut self, v: bool) {
        self.cherry = ::std::option::Option::Some(v);
    }

    // required .gameEngine.LightState.GameMode mode = 6;


    pub fn get_mode(&self) -> LightState_GameMode {
        self.mode.unwrap_or(LightState_GameMode::RUNNING)
    }
    pub fn clear_mode(&mut self) {
        self.mode = ::std::option::Option::None;
    }

    pub fn has_mode(&self) -> bool {
        self.mode.is_some()
    }

    // Param is passed by value, moved
    pub fn set_mode(&mut self, v: LightState_GameMode) {
        self.mode = ::std::option::Option::Some(v);
    }

    // required int32 score = 8;


    pub fn get_score(&self) -> i32 {
        self.score.unwrap_or(0)
    }
    pub fn clear_score(&mut self) {
        self.score = ::std::option::Option::None;
    }

    pub fn has_score(&self) -> bool {
        self.score.is_some()
    }

    // Param is passed by value, moved
    pub fn set_score(&mut self, v: i32) {
        self.score = ::std::option::Option::Some(v);
    }

    // required int32 lives = 11;


    pub fn get_lives(&self) -> i32 {
        self.lives.unwrap_or(0)
    }
    pub fn clear_lives(&mut self) {
        self.lives = ::std::option::Option::None;
    }

    pub fn has_lives(&self) -> bool {
        self.lives.is_some()
    }

    // Param is passed by value, moved
    pub fn set_lives(&mut self, v: i32) {
        self.lives = ::std::option::Option::Some(v);
    }
}

impl ::protobuf::Message for LightState {
    fn is_initialized(&self) -> bool {
        if self.pacman.is_none() {
            return false;
        }
        if self.red_ghost.is_none() {
            return false;
        }
        if self.pink_ghost.is_none() {
            return false;
        }
        if self.orange_ghost.is_none() {
            return false;
        }
        if self.blue_ghost.is_none() {
            return false;
        }
        if self.cherry.is_none() {
            return false;
        }
        if self.mode.is_none() {
            return false;
        }
        if self.score.is_none() {
            return false;
        }
        if self.lives.is_none() {
            return false;
        }
        for v in &self.pacman {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.red_ghost {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.pink_ghost {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.orange_ghost {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.blue_ghost {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.pacman)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.red_ghost)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.pink_ghost)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.orange_ghost)?;
                },
                5 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.blue_ghost)?;
                },
                12 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.cherry = ::std::option::Option::Some(tmp);
                },
                6 => {
                    ::protobuf::rt::read_proto2_enum_with_unknown_fields_into(wire_type, is, &mut self.mode, 6, &mut self.unknown_fields)?
                },
                8 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.score = ::std::option::Option::Some(tmp);
                },
                11 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.lives = ::std::option::Option::Some(tmp);
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.pacman.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.red_ghost.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.pink_ghost.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.orange_ghost.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.blue_ghost.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(v) = self.cherry {
            my_size += 2;
        }
        if let Some(v) = self.mode {
            my_size += ::protobuf::rt::enum_size(6, v);
        }
        if let Some(v) = self.score {
            my_size += ::protobuf::rt::value_size(8, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.lives {
            my_size += ::protobuf::rt::value_size(11, v, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.pacman.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.red_ghost.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.pink_ghost.as_ref() {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.orange_ghost.as_ref() {
            os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.blue_ghost.as_ref() {
            os.write_tag(5, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(v) = self.cherry {
            os.write_bool(12, v)?;
        }
        if let Some(v) = self.mode {
            os.write_enum(6, ::protobuf::ProtobufEnum::value(&v))?;
        }
        if let Some(v) = self.score {
            os.write_int32(8, v)?;
        }
        if let Some(v) = self.lives {
            os.write_int32(11, v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> LightState {
        LightState::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<LightState_AgentState>>(
                "pacman",
                |m: &LightState| { &m.pacman },
                |m: &mut LightState| { &mut m.pacman },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<LightState_AgentState>>(
                "red_ghost",
                |m: &LightState| { &m.red_ghost },
                |m: &mut LightState| { &mut m.red_ghost },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<LightState_AgentState>>(
                "pink_ghost",
                |m: &LightState| { &m.pink_ghost },
                |m: &mut LightState| { &mut m.pink_ghost },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<LightState_AgentState>>(
                "orange_ghost",
                |m: &LightState| { &m.orange_ghost },
                |m: &mut LightState| { &mut m.orange_ghost },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<LightState_AgentState>>(
                "blue_ghost",
                |m: &LightState| { &m.blue_ghost },
                |m: &mut LightState| { &mut m.blue_ghost },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "cherry",
                |m: &LightState| { &m.cherry },
                |m: &mut LightState| { &mut m.cherry },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeEnum<LightState_GameMode>>(
                "mode",
                |m: &LightState| { &m.mode },
                |m: &mut LightState| { &mut m.mode },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "score",
                |m: &LightState| { &m.score },
                |m: &mut LightState| { &mut m.score },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "lives",
                |m: &LightState| { &m.lives },
                |m: &mut LightState| { &mut m.lives },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<LightState>(
                "LightState",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static LightState {
        static instance: ::protobuf::rt::LazyV2<LightState> = ::protobuf::rt::LazyV2::INIT;
        instance.get(LightState::new)
    }
}

impl ::protobuf::Clear for LightState {
    fn clear(&mut self) {
        self.pacman.clear();
        self.red_ghost.clear();
        self.pink_ghost.clear();
        self.orange_ghost.clear();
        self.blue_ghost.clear();
        self.cherry = ::std::option::Option::None;
        self.mode = ::std::option::Option::None;
        self.score = ::std::option::Option::None;
        self.lives = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for LightState {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for LightState {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct LightState_AgentState {
    // message fields
    x: ::std::option::Option<i32>,
    y: ::std::option::Option<i32>,
    state: ::std::option::Option<LightState_GhostState>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a LightState_AgentState {
    fn default() -> &'a LightState_AgentState {
        <LightState_AgentState as ::protobuf::Message>::default_instance()
    }
}

impl LightState_AgentState {
    pub fn new() -> LightState_AgentState {
        ::std::default::Default::default()
    }

    // required int32 x = 1;


    pub fn get_x(&self) -> i32 {
        self.x.unwrap_or(0)
    }
    pub fn clear_x(&mut self) {
        self.x = ::std::option::Option::None;
    }

    pub fn has_x(&self) -> bool {
        self.x.is_some()
    }

    // Param is passed by value, moved
    pub fn set_x(&mut self, v: i32) {
        self.x = ::std::option::Option::Some(v);
    }

    // required int32 y = 2;


    pub fn get_y(&self) -> i32 {
        self.y.unwrap_or(0)
    }
    pub fn clear_y(&mut self) {
        self.y = ::std::option::Option::None;
    }

    pub fn has_y(&self) -> bool {
        self.y.is_some()
    }

    // Param is passed by value, moved
    pub fn set_y(&mut self, v: i32) {
        self.y = ::std::option::Option::Some(v);
    }

    // optional .gameEngine.LightState.GhostState state = 4;


    pub fn get_state(&self) -> LightState_GhostState {
        self.state.unwrap_or(LightState_GhostState::NORMAL)
    }
    pub fn clear_state(&mut self) {
        self.state = ::std::option::Option::None;
    }

    pub fn has_state(&self) -> bool {
        self.state.is_some()
    }

    // Param is passed by value, moved
    pub fn set_state(&mut self, v: LightState_GhostState) {
        self.state = ::std::option::Option::Some(v);
    }
}

impl ::protobuf::Message for LightState_AgentState {
    fn is_initialized(&self) -> bool {
        if self.x.is_none() {
            return false;
        }
        if self.y.is_none() {
            return false;
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.x = ::std::option::Option::Some(tmp);
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.y = ::std::option::Option::Some(tmp);
                },
                4 => {
                    ::protobuf::rt::read_proto2_enum_with_unknown_fields_into(wire_type, is, &mut self.state, 4, &mut self.unknown_fields)?
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.x {
            my_size += ::protobuf::rt::value_size(1, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.y {
            my_size += ::protobuf::rt::value_size(2, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.state {
            my_size += ::protobuf::rt::enum_size(4, v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.x {
            os.write_int32(1, v)?;
        }
        if let Some(v) = self.y {
            os.write_int32(2, v)?;
        }
        if let Some(v) = self.state {
            os.write_enum(4, ::protobuf::ProtobufEnum::value(&v))?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> LightState_AgentState {
        LightState_AgentState::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "x",
                |m: &LightState_AgentState| { &m.x },
                |m: &mut LightState_AgentState| { &mut m.x },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "y",
                |m: &LightState_AgentState| { &m.y },
                |m: &mut LightState_AgentState| { &mut m.y },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeEnum<LightState_GhostState>>(
                "state",
                |m: &LightState_AgentState| { &m.state },
                |m: &mut LightState_AgentState| { &mut m.state },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<LightState_AgentState>(
                "LightState.AgentState",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static LightState_AgentState {
        static instance: ::protobuf::rt::LazyV2<LightState_AgentState> = ::protobuf::rt::LazyV2::INIT;
        instance.get(LightState_AgentState::new)
    }
}

impl ::protobuf::Clear for LightState_AgentState {
    fn clear(&mut self) {
        self.x = ::std::option::Option::None;
        self.y = ::std::option::Option::None;
        self.state = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for LightState_AgentState {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for LightState_AgentState {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum LightState_GameMode {
    RUNNING = 0,
    PAUSED = 1,
}

impl ::protobuf::ProtobufEnum for LightState_GameMode {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<LightState_GameMode> {
        match value {
            0 => ::std::option::Option::Some(LightState_GameMode::RUNNING),
            1 => ::std::option::Option::Some(LightState_GameMode::PAUSED),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [LightState_GameMode] = &[
            LightState_GameMode::RUNNING,
            LightState_GameMode::PAUSED,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            ::protobuf::reflect::EnumDescriptor::new_pb_name::<LightState_GameMode>("LightState.GameMode", file_descriptor_proto())
        })
    }
}

impl ::std::marker::Copy for LightState_GameMode {
}

impl ::std::default::Default for LightState_GameMode {
    fn default() -> Self {
        LightState_GameMode::RUNNING
    }
}

impl ::protobuf::reflect::ProtobufValue for LightState_GameMode {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum LightState_GhostState {
    NORMAL = 0,
    FRIGHTENED = 1,
}

impl ::protobuf::ProtobufEnum for LightState_GhostState {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<LightState_GhostState> {
        match value {
            0 => ::std::option::Option::Some(LightState_GhostState::NORMAL),
            1 => ::std::option::Option::Some(LightState_GhostState::FRIGHTENED),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [LightState_GhostState] = &[
            LightState_GhostState::NORMAL,
            LightState_GhostState::FRIGHTENED,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            ::protobuf::reflect::EnumDescriptor::new_pb_name::<LightState_GhostState>("LightState.GhostState", file_descriptor_proto())
        })
    }
}

impl ::std::marker::Copy for LightState_GhostState {
}

impl ::std::default::Default for LightState_GhostState {
    fn default() -> Self {
        LightState_GhostState::NORMAL
    }
}

impl ::protobuf::reflect::ProtobufValue for LightState_GhostState {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n-src/robomodules/definitions/light_state.proto\x12\ngameEngine\"\xfc\
    \x04\n\nLightState\x129\n\x06pacman\x18\x01\x20\x02(\x0b2!.gameEngine.Li\
    ghtState.AgentStateR\x06pacman\x12>\n\tred_ghost\x18\x02\x20\x02(\x0b2!.\
    gameEngine.LightState.AgentStateR\x08redGhost\x12@\n\npink_ghost\x18\x03\
    \x20\x02(\x0b2!.gameEngine.LightState.AgentStateR\tpinkGhost\x12D\n\x0co\
    range_ghost\x18\x04\x20\x02(\x0b2!.gameEngine.LightState.AgentStateR\x0b\
    orangeGhost\x12@\n\nblue_ghost\x18\x05\x20\x02(\x0b2!.gameEngine.LightSt\
    ate.AgentStateR\tblueGhost\x12\x16\n\x06cherry\x18\x0c\x20\x02(\x08R\x06\
    cherry\x123\n\x04mode\x18\x06\x20\x02(\x0e2\x1f.gameEngine.LightState.Ga\
    meModeR\x04mode\x12\x14\n\x05score\x18\x08\x20\x02(\x05R\x05score\x12\
    \x14\n\x05lives\x18\x0b\x20\x02(\x05R\x05lives\x1aa\n\nAgentState\x12\
    \x0c\n\x01x\x18\x01\x20\x02(\x05R\x01x\x12\x0c\n\x01y\x18\x02\x20\x02(\
    \x05R\x01y\x127\n\x05state\x18\x04\x20\x01(\x0e2!.gameEngine.LightState.\
    GhostStateR\x05state\"#\n\x08GameMode\x12\x0b\n\x07RUNNING\x10\0\x12\n\n\
    \x06PAUSED\x10\x01\"(\n\nGhostState\x12\n\n\x06NORMAL\x10\0\x12\x0e\n\nF\
    RIGHTENED\x10\x01\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
